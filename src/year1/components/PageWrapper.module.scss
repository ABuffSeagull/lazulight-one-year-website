/* stylelint-disable keyframes-name-pattern */
// See https://github.com/stylelint/stylelint/issues/5997
@use "../variables" as *;
@use "sass:math";

.container {
  height: 100%;
  width: 100%;
  display: flex;
  flex-flow: column nowrap;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  max-width: 100vw;
}

.container-inner {
  display: flex;
  flex-direction: column;
  gap: 6rem;
  width: 100%;
  max-width: 80rem;
  height: 100%;
  padding: 0 1rem 6rem;
  position: relative;
}

.elira {
  color: $elira-text-color;
}

.pomu {
  color: $pomu-text-color;
}

.finana {
  color: $finana-text-color;
}

.home-collage {
  position: relative;
  width: 100%;
  height: auto;

  picture,
  img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: auto;
    object-fit: contain;
    opacity: 0.25;
  }
}

.page-bg-static {
  &-elira {
    background-image: linear-gradient(to bottom, #a7cde0, #292e65);
    background-color: #a7cde0; // Backup in case the image doesn't load
  }

  &-finana {
    background-image: linear-gradient(to bottom, #4dbbbd60, #1c374aa0),
      /* Semitransparent overlay*/ url("../assets/BG/Finana-BG-Left_cf50.webp"),
      url("../assets/BG/Finana-BG-Right_cf50.webp"),
      linear-gradient(to bottom, #4dbbbd, #1c374a);
    background-color: #83e5e6; // Backup in case the image doesn't load
    background-size: 100%, 10%, 10%, 100%;
    background-position-x: center, left, right, center;
    background-repeat: no-repeat, repeat-y, repeat-y, no-repeat;
  }

  &-pomu {
    background-image: url("../assets/BG/Pomu-BG_cf50.webp");
    background-color: #258e70; // Backup in case the image doesn't load
    background-repeat: repeat-y;
    background-size: 100%;
  }

  &-home {
    background-image: linear-gradient(to bottom, #274454, #285455);
    background-color: #274454; // Backup in case the image doesn't load
  }

  &-vn {
    background-image: linear-gradient(to bottom, #76c4f2, #00a1ea);
    background-color: #76c4f2; // Backup in case the image doesn't load
  }

  &-fnf {
    // FNF Finana BG
    background-image: url("../assets/FNF/Finana_Dialog_box_transparent_inverted.webp"),
      linear-gradient(to bottom, rgb(99 233 209 / 100%), rgb(80 178 226 / 100%));
    background-color: #274454; // Backup in case the image doesn't load
  }

  &-dcl {
    background-image: linear-gradient(to bottom, #274454, #285455);
    background-color: #274454; // Backup in case the image doesn't load
  }
}

.page-bg-animation {
  // Animation notes:
  //   animation-delay: Negative means start part way through. Use this to initialise each element math.randomly over the cycle
  //   animation-duration: Would be better to use JS to adjust based on screen dimension...
  //   For each element, specify 'width' or 'height', then 'object-fit' will scale the other dim

  &-elira,
  &-pomu,
  &-finana,
  &-vn,
  &-dcl {
    // Container properties
    position: relative;
    overflow: hidden;

    // Properties common to all animations
    &-container img {
      position: absolute;
      z-index: 0;
      animation-timing-function: linear;
      animation-iteration-count: infinite;
      animation-fill-mode: none;
      animation-play-state: running;
      object-fit: contain;
    }

    &-container-on img {
      animation-play-state: running;
    }

    &-container-off img {
      animation-play-state: paused;
    }
  }

  &-elira {
    $eliracloud-count: 16; // Must be greater than/equal to the number of clouds in the html
    $eliracloud-height: 30%;
    $eliracloud-duration-min: 20;
    $eliracloud-duration-extra: 40;
    $elirastar-count: 60; // Must be greater than/equal to the number of stars in the html
    $elirastar-height: 2%;
    $elirastar-duration-normal: 5;

    @for $i from 1 through $eliracloud-count {
      &-cloud:nth-child(#{$i}) {
        animation-name: eliracloud#{$i};
        animation-duration: math.random() *
          $eliracloud-duration-extra +
          $eliracloud-duration-min +
          s;
        animation-delay: -1 * math.random() * $eliracloud-duration-min + s;
        animation-direction: normal;
        opacity: 0.5;
        height: $eliracloud-height;
        bottom: 40% + math.random() * 60%; // Top half only
      }

      @keyframes eliracloud#{$i} {
        from {
          transform: translateX(-125vw);
        }

        to {
          transform: translateX(50vw);
        }
      }
    }

    @for $id from 1 through $elirastar-count {
      &-star:nth-child(#{$id}) {
        animation-name: elirastar#{$id};
        animation-duration: $elirastar-duration-normal + s;
        animation-delay: -1 * math.random() * $elirastar-duration-normal + s;
        animation-direction: alternate;
        height: $elirastar-height;
        top: 50% + math.random() * 50%; // Bottom half only
        left: math.random() * 100%;
      }

      @keyframes elirastar#{$id} {
        from {
          opacity: 0;
        }

        to {
          opacity: 0.5;
        }
      }
    }
  }

  &-pomu {
    @keyframes pomuCoinFall {
      from {
        top: -20%;
        transform: rotate(var(--rotation)) scale(var(--scale));
      }

      to {
        top: 100%;
        transform: rotate(var(--rotation)) scale(var(--scale));
      }
    }

    &-coin {
      height: 4rem;
      opacity: 0.2;
      animation-name: pomuCoinFall;
      animation-duration: 2s;
      animation-iteration-count: infinite;
      animation-timing-function: linear;
    }
  }

  &-finana {
    $finanafish-count: 30; // Must be greater than/equal to the number of fish in the html
    $finanafish-height: 5%;
    $finanafish-duration-min: 5;
    $finanafish-duration-extra: 10;

    @for $i from 1 through $finanafish-count {
      &-fish:nth-child(#{$i}) {
        animation-name: finanafish#{$i};
        animation-duration: $finanafish-duration-min +
          math.random() *
          $finanafish-duration-extra +
          s;
        animation-delay: -1 * math.random() * $finanafish-duration-min + s;
        animation-direction: normal;
        opacity: 0.5;
        height: $finanafish-height;
        left: 100px;
        bottom: math.random() * 100%;
      }

      @keyframes finanafish#{$i} {
        from {
          transform: translateX(100vw);
        }

        to {
          transform: translateX(0);
        }
      }

      @keyframes bubbleRise {
        from {
          bottom: -20%;
          transform: scale(var(--scale-factor));
        }

        to {
          bottom: 100%;
          transform: scale(var(--scale-factor));
        }
      }

      &-bubble {
        height: 4rem;
        opacity: 0.6;
        animation-name: bubbleRise;
        animation-duration: var(--animation-duration, 2s);
        animation-iteration-count: infinite;
        animation-timing-function: linear;
      }
    }
  }

  &-vn {
    $vn-cloud-count: 32; // Must be greater than/equal to the number of clouds in the html
    $vn-cloud-height: 10%;
    $vn-cloud-duration-min: 20;
    $vn-cloud-duration-extra: 40;

    @for $i from 1 through $vn-cloud-count {
      &-cloud:nth-child(#{$i}) {
        animation-name: vncloud#{$i};
        animation-duration: math.random() *
          $vn-cloud-duration-extra +
          $vn-cloud-duration-min +
          s;
        animation-delay: -1 * math.random() * $vn-cloud-duration-min + s;
        animation-direction: normal;
        opacity: 0.5;
        height: $vn-cloud-height;
        bottom: math.random() * 100%;
      }

      @keyframes vncloud#{$i} {
        from {
          left: -50%;
        }

        to {
          left: 150%;
        }
      }
    }
  }

  &-dcl {
    @keyframes dlcCyalumeFall {
      from {
        top: -20%;
        transform: rotate(var(--rotation)) scale(var(--scale));
      }

      to {
        top: 100%;
        transform: rotate(var(--rotation)) scale(var(--scale));
      }
    }

    &-cyalume {
      height: 10vw;

      // opacity: 0.5;
      animation-name: dlcCyalumeFall;
      animation-duration: 2s;
      animation-iteration-count: infinite;
      animation-timing-function: linear;
    }
  }

  // TODO: Add remaining pages
}

.animation-toggle-on {
  position: relative; // BG animation interferes with z-index. This somehow fixes it (search 'stacking context')
  z-index: 50;
  display: inline-block;
  padding: 0.5rem 1rem;
  width: 9rem;
  height: 3rem;
  background-color: #fafafa;
  border: 2px solid black;
  border-radius: 5rem;
  color: black;
  text-align: center;
  transition-property: color, background-color;
  transition-duration: 250ms;
  transition-timing-function: ease-out;
  margin-bottom: 1.5rem;
  cursor: pointer;
  visibility: visible;

  &:hover {
    background-color: #bfdfd7;
  }

  @media (width <= 768px) {
    margin-top: 1.5rem;
  }
}

.animation-toggle-off {
  visibility: hidden;
  pointer-events: none;
}
