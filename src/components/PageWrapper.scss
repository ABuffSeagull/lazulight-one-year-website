@import "../variables.scss";

.page-bg-static {
	&-elira {
		background-image: linear-gradient(to bottom, #a7cde0, #292e65);
		background-color: #a7cde0; // Backup in case the image doesn't load
	}
	&-finana {
			background-image:
				linear-gradient(to bottom, #4dbbbd60, #1c374aa0), // Semitransparent overlay
				url('../assets/BG/Finana-BG-Left_cf50.webp'), 
				url('../assets/BG/Finana-BG-Right_cf50.webp'),
				linear-gradient(to bottom, #4dbbbd, #1c374a);
		background-color: #83e5e6; // Backup in case the image doesn't load

		background-size: 100%, 10%, 10%, 100%;
		background-position-x: center, left, right, center;
		background-repeat: no-repeat, repeat-y, repeat-y, no-repeat;
	}
	&-pomu {
		background-image: url('../assets/BG/Pomu-BG_cf50.webp');
		background-color: #258E70; // Backup in case the image doesn't load
		background-repeat: repeat-y;
		background-size: 100%;
	}

	// TODO: Add remaining pages
}

.page-bg-animation {
	&-elira {
		&-container {
			height: 100%;
			width: 100%;
			position: relative;
			overflow: hidden;
		}
		
		$eliracloud-count: 16; // Must be greater than/equal to the number of clouds in the html
		$eliracloud-height: 30%;
		$eliracloud-duration-normal: 30;
		@for $i from 1 through $eliracloud-count {
			&-cloud:nth-child(#{$i}){
				position: absolute;
				z-index: 0;
				animation-name: eliracloud#{$i};
				animation-duration: $eliracloud-duration-normal + s;
				animation-delay: random() * $eliracloud-duration-normal + s;
				animation-timing-function: linear;
				animation-iteration-count: infinite;
				animation-direction: normal;
				animation-fill-mode: none;
				animation-play-state: running;
				opacity: 0.5;
				
				height: $eliracloud-height;
				object-fit: contain;
				bottom: 40% + random()*60%; // Top half only

				left:-50%; // Initialise: Force start off screen during delay of first iteration
			}
			@keyframes eliracloud#{$i} {
				from { left: -50%; }
				to   { left: 150%; }
			}
		}

		$elirastar-count: 60; // Must be greater than/equal to the number of stars in the html
		$elirastar-height: 2%;
		$elirastar-duration-normal: 5;
		@for $id from 1 through $elirastar-count {
			&-star:nth-child(#{$id}){
				position: absolute;
				z-index: 0;
				animation-name: elirastar#{$id};
				animation-duration: $elirastar-duration-normal + s;
				animation-delay: random() * $elirastar-duration-normal + s;
				animation-timing-function: linear;
				animation-iteration-count: infinite;
				animation-direction: alternate;
				animation-fill-mode: none;
				animation-play-state: running;
				
				height: $elirastar-height;
				object-fit: contain;
				top: 50% + random()*50%; // Bottom half only
				left: random()*100%;

				opacity: 0; // Initialise: Force start off screen during delay of first iteration
			}
			@keyframes elirastar#{$id} {
				from { opacity: 0; }
				to   { opacity: 0.5; }
			}
		}
	}

	&-pomu {
		&-container {
			height: 100%;
			width: 100%;
			position: relative;
			overflow: hidden;
		}

		$pomucoin-count: 60; // Must be greater than/equal to the number of pomuCoins in the html
		$pomucoin-width: 5%;
		$pomucoin-duration-normal: 5;
		$pomucoin-duration-tablet: 10;
		$pomucoin-duration-mobile: 15; // Account for change in browser height (completely broken with the 'show all'...)
		@for $i from 1 through $pomucoin-count {
			&-coin:nth-child(#{$i}){
				position: absolute;
				z-index: 0;
				animation-name: pomucoin#{$i};
				animation-duration: $pomucoin-duration-normal + s;
				@media (max-width: $bpTablet) { animation-duration: $pomucoin-duration-tablet + s; }
				@media (max-width: $bpMobile) { animation-duration: $pomucoin-duration-mobile + s; }
				animation-delay: random() * $pomucoin-duration-normal + s;
				@media (max-width: $bpTablet) { animation-delay: random() * $pomucoin-duration-tablet + s; }
				@media (max-width: $bpMobile) { animation-delay:  random() * $pomucoin-duration-mobile + s; }
				animation-timing-function: linear;
				animation-iteration-count: infinite;
				animation-direction: normal;
				animation-fill-mode: none;
				animation-play-state: running;
				opacity: 0.2;
				
				width: $pomucoin-width;
				object-fit: contain;
				left: $pomucoin-width + random(100 - 2 * $pomucoin-width) * 1%;
				transform: rotate(random(360)+deg);

				top:-20%; // Initialise: Force start off screen during delay of first iteration
			}
			@keyframes pomucoin#{$i} {
				from { top:-20%; }
				to   { top: 120%; }
			}
		}
	}

	&-finana {
		&-container {
			height: 100%;
			width: 100%;
			position: relative;
			overflow: hidden;
		}

		$finanafish-count: 30; // Must be greater than/equal to the number of fish in the html
		$finanafish-height: 5%;
		$finanafish-duration-min: 5;
		$finanafish-duration-extra: 10;
		@for $i from 1 through $finanafish-count {
			&-fish:nth-child(#{$i}){
				position: absolute;
				z-index: 0;
				animation-name: finanafish#{$i};
				animation-duration: $finanafish-duration-min + random()*$finanafish-duration-extra + s;
				animation-delay: random() * $finanafish-duration-min + s;
				animation-timing-function: linear;
				animation-iteration-count: infinite;
				animation-direction: normal;
				animation-fill-mode: none;
				animation-play-state: running;
				opacity: 0.5;
				
				height: $finanafish-height;
				object-fit: contain;
				bottom: 40% + random()*60%; // Top half only
				bottom: random()*100%;

				right:-50%; // Initialise: Force start off screen during delay of first iteration
			}
			@keyframes finanafish#{$i} {
				from { right: -50%; }
				to   { right: 150%; }
			}
		}
	
		$finanabubble-count: 60; // Must be greater than/equal to the number of finanabubbles in the html
		$finanabubble-width: 5%;
		$finanabubble-duration-normal: 5;
		$finanabubble-duration-tablet: 10;
		$finanabubble-duration-mobile: 15; // Account for change in browser height (completely broken with the 'show all'...)
		@for $i from 1 through $finanabubble-count {
			&-bubble:nth-child(#{$i}){
				position: absolute;
				z-index: 0;
				animation-name: finanabubble#{$i};
				animation-duration: $finanabubble-duration-normal + s;
				@media (max-width: $bpTablet) { animation-duration: $finanabubble-duration-tablet + s; }
				@media (max-width: $bpMobile) { animation-duration: $finanabubble-duration-mobile + s; }
				animation-delay: random() * $finanabubble-duration-normal + s;
				@media (max-width: $bpTablet) { animation-delay: random() * $finanabubble-duration-tablet + s; }
				@media (max-width: $bpMobile) { animation-delay:  random() * $finanabubble-duration-mobile + s; }
				animation-timing-function: linear;
				animation-iteration-count: infinite;
				animation-direction: normal;
				animation-fill-mode: none;
				animation-play-state: running;
				opacity: 0.6;
				
				width: $finanabubble-width;
				object-fit: contain;
				left: $finanabubble-width + random(100 - 2 * $finanabubble-width) * 1%;
				transform: rotate(random(360)+deg);
	
				bottom:-20%; // Initialise: Force start off screen during delay of first iteration
			}
			@keyframes finanabubble#{$i} {
				from { bottom: -20%; }
				to   { bottom: 120%; }
			}
		}
	}

	// TODO: Add remaining pages
}

// Temporary until replaced by full nav component
nav {
	position: relative; // Animation interferes with z-index. This somehow fixes it (search 'stacking context')
	z-index: 100;
}
.link {
	display: inline-block;
	padding: 0.5rem 1rem;
	margin-left: 0.5rem;
	background-color: hsl(114deg 15% 75% / 1);
	border-radius: 0.75rem;
	color: black;
	text-align: center;
	transition-property: color, background-color;
	transition-duration: 250ms;
	transition-timing-function: ease-out;

	&:visited {
		color: hsl(0deg 0% 0% / 0.7);
	}

	&:hover,
	&:focus {
		background-color: hsl(114deg 15% 50% / 1);
	}
}